- Make an Order 
- The order goes to the Order Cart 

Tabe: Order Cart 
    - User thats making the order
    - the item that is being ordered



 # this ensures that the user can only modify their own cart
    data = request.get_json()

    if current_user.id != data["user_id"]:
        return {'errors': 'User is not authorized for this request'}, 401 - works

   
    create a new one
     access_new_order:
        new_order = Order(user_id=data["user_id"], restaurant_id=data["restaurant_id"])
        db.session.add(new_order)
        db.session.commit()
        access_new_order = new_order

    # Create OrderCart instances for each menu_item_id
    for menu_item_id in data["menu_item_id"]:
        new_order_cart = OrderCart(menu_item_id=menu_item_id, order_id=access_new_order.id)
        db.session.add(new_order_cart)

    db.session.commit()

    return {"message": f'Successfully added order for user {current_user.id}'}, 200









    # this ensures that the user can only modify their own cart
    data = request.get_json()

    if (current_user.id != data["user_id"]):
        return {'errors': 'User is not authorized for this request'}, 401

    # Create new Order)
    new_order = Order(user_id=data["user_id"], restaurant_id=data["restaurant_id"])
    db.session.add(new_order)
    db.session.commit()

    # Query for the new Cart ID
    access_new_order = Order.query.filter(Order.user_id == data["user_id"], Order.restaurant_id == data["restaurant_id"])

    for id in data["menu_item_id"]:
        new_order = OrderCart(user_id=current_user.id, menu_item_id=id, order_id=access_new_order)
        db.session.add(access_new_order)
    db.session.commit()

    return {"message": f'Successfully added order for user {current_user.id}'}, 200
